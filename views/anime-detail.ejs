<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= anime.name %> - AniMax</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.1/flowbite.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        :root {
            --primary: #3b82f6;
            --secondary: #ec4899;
            --dark: #0f172a;
            --light: #f8fafc;
            --glass: rgba(15, 23, 42, 0.9);
            --glass-hover: rgba(15, 23, 42, 0.8);
            --border: rgba(255, 255, 255, 0.1);
        }

        body {
            background-color: var(--dark);
            background-image: 
                radial-gradient(at 0% 0%, hsla(253, 16%, 7%, 1) 0, transparent 50%),
                radial-gradient(at 50% 0%, hsla(225, 39%, 30%, 1) 0, transparent 50%),
                radial-gradient(at 100% 0%, hsla(339, 49%, 30%, 0.3) 0, transparent 50%),
                radial-gradient(at 0% 100%, hsla(22, 100%, 77%, 0.2) 0, transparent 50%),
                radial-gradient(at 80% 100%, hsla(242, 100%, 70%, 0.2) 0, transparent 50%),
                radial-gradient(at 50% 50%, hsla(215, 39%, 20%, 1) 0, transparent 100%);
            min-height: 100vh;
            color: var(--light);
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        .side-nav {
            width: 280px;
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            background: var(--glass);
            backdrop-filter: blur(20px);
            border-right: 1px solid var(--border);
            padding: 2rem;
            transition: all 0.3s ease;
            z-index: 40;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            color: rgba(255, 255, 255, 0.8);
            border-radius: 8px;
            transition: all 0.3s ease;
            margin-bottom: 0.5rem;
        }

        .nav-link:hover {
            background: var(--glass-hover);
            color: var(--light);
        }

        .nav-link.active {
            background: var(--primary);
            color: var(--light);
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 3rem;
        }

        .logo-section i {
            font-size: 2rem;
            color: var(--primary);
        }

        .logo-section span {
            font-size: 1.5rem;
            font-weight: 600;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .main-content {
            margin-left: 280px;
            padding: 2rem;
            width: calc(100% - 280px);
        }

        .detail-container {
            background: rgba(30, 41, 59, 0.7);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1.5rem;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }

        .glass-effect {
            background: rgba(30, 41, 59, 0.7);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);
        }
        .episode-card {
            transition: all 0.3s ease;
        }
        .episode-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3);
        }
        .video-container {
            position: relative;
            width: 100%;
            border-radius: 15px;
            overflow: hidden;
            background: rgba(0, 0, 0, 0.3);
            box-shadow: 0 10px 30px -5px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .video-wrapper {
            position: relative;
            width: 100%;
            aspect-ratio: 16/9;
            background: #000;
        }
        .video-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 3;
        }
        .video-container:hover .video-overlay {
            opacity: 1;
        }
        .big-play-button {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: rgba(59, 130, 246, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 3px solid rgba(255, 255, 255, 0.5);
        }
        .big-play-button:hover {
            transform: scale(1.1);
            background: rgba(59, 130, 246, 1);
        }
        .big-play-button i {
            font-size: 2rem;
            color: white;
            margin-left: 5px;
        }
        .next-episode-prompt {
            position: absolute;
            top: 50%;
            right: 2rem;
            transform: translateY(-50%);
            background: rgba(15, 23, 42, 0.85);
            padding: 1.8rem;
            border-radius: 20px;
            display: none;
            animation: slideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 10;
            border: 2px solid rgba(59, 130, 246, 0.2);
            backdrop-filter: blur(15px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4);
            min-width: 280px;
        }
        .next-episode-prompt::before {
            content: '';
            position: absolute;
            inset: -1px;
            border-radius: 21px;
            padding: 1px;
            background: linear-gradient(45deg, rgba(59, 130, 246, 0.5), rgba(37, 99, 235, 0.2), rgba(59, 130, 246, 0.5));
            -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            -webkit-mask-composite: xor;
            mask-composite: exclude;
            pointer-events: none;
        }
        @keyframes slideIn {
            0% { 
                transform: translate(100%, -50%);
                opacity: 0;
                filter: blur(10px);
            }
            100% { 
                transform: translate(0, -50%);
                opacity: 1;
                filter: blur(0);
            }
        }
        .next-episode-prompt.show {
            display: block;
        }
        .next-episode-button {
            display: flex;
            align-items: center;
            gap: 1rem;
            color: white;
            font-weight: 600;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            width: 100%;
            justify-content: center;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            font-size: 0.95rem;
            border: 1px solid rgba(255, 255, 255, 0.15);
            position: relative;
            overflow: hidden;
        }
        .next-episode-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                90deg,
                transparent,
                rgba(255, 255, 255, 0.2),
                transparent
            );
            transition: 0.5s;
        }
        .next-episode-button:hover::before {
            left: 100%;
        }
        .next-episode-button:hover {
            background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(37, 99, 235, 0.4);
            letter-spacing: 1.2px;
        }
        .next-episode-button i {
            font-size: 1.2rem;
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .next-episode-button:hover i {
            transform: translateX(5px);
        }
        .countdown {
            font-size: 1.1rem;
            color: rgba(255, 255, 255, 0.95);
            text-align: center;
            margin-top: 1.2rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.8rem;
            letter-spacing: 0.5px;
            position: relative;
            padding-top: 1rem;
        }
        .countdown::before {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 40px;
            height: 2px;
            background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.5), transparent);
        }
        .countdown::after {
            content: '';
            display: block;
            width: 10px;
            height: 10px;
            background: linear-gradient(135deg, #3b82f6, #60a5fa);
            border-radius: 50%;
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0% {
                transform: scale(0.8);
                box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);
            }
            
            70% {
                transform: scale(1.2);
                box-shadow: 0 0 0 12px rgba(59, 130, 246, 0);
            }
            
            100% {
                transform: scale(0.8);
                box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
            }
        }
        .video-info {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            background: linear-gradient(rgba(0, 0, 0, 0.9), transparent);
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: opacity 0.3s;
            z-index: 4;
        }
        .video-title {
            color: white;
            font-size: 1.2rem;
            font-weight: bold;
        }
        .episode-info {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }
        .season-tabs {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 20px;
        }
        .season-tab {
            background: rgba(30, 41, 59, 0.7);
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 25px;
            overflow: hidden;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        .season-tab:hover {
            border-color: rgba(59, 130, 246, 0.5);
            box-shadow: 0 15px 40px rgba(59, 130, 246, 0.1);
            transform: translateY(-2px);
        }
        .season-header {
            padding: 1.8rem;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            background: linear-gradient(to right, rgba(30, 41, 59, 0.95), rgba(30, 41, 59, 0.8));
        }
        .season-title {
            display: flex;
            align-items: center;
            gap: 1.2rem;
        }
        .season-icon {
            font-size: 1.8rem;
            color: #3b82f6;
            transition: transform 0.4s ease;
            background: linear-gradient(135deg, #3b82f6, #60a5fa);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .season-tab.active .season-icon {
            transform: rotate(180deg);
        }
        .season-info {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        .season-number {
            font-size: 1.4rem;
            font-weight: 700;
            color: white;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        .episode-count {
            font-size: 1rem;
            color: rgba(255, 255, 255, 0.7);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .episode-count i {
            color: #3b82f6;
            font-size: 0.9rem;
        }
        .season-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            background: rgba(15, 23, 42, 0.3);
        }
        .season-tab.active .season-content {
            max-height: 2000px;
        }
        .episode-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            padding: 2rem;
        }
        .episode-card {
            background: rgba(30, 41, 59, 0.6);
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 20px;
            overflow: hidden;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .episode-card:hover {
            transform: translateY(-5px);
            border-color: rgba(59, 130, 246, 0.5);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            background: rgba(59, 130, 246, 0.1);
        }
        .episode-card.active {
            border-color: #3b82f6;
            background: rgba(59, 130, 246, 0.15);
            box-shadow: 0 10px 30px rgba(59, 130, 246, 0.2);
        }
        .episode-link {
            display: flex;
            align-items: center;
            padding: 1.5rem;
            gap: 1.2rem;
            color: white;
            text-decoration: none;
        }
        .play-icon-wrapper {
            width: 3.5rem;
            height: 3.5rem;
            background: rgba(59, 130, 246, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.4s ease;
            border: 2px solid rgba(59, 130, 246, 0.3);
        }
        .episode-card:hover .play-icon-wrapper {
            background: rgba(59, 130, 246, 0.2);
            transform: scale(1.1);
            border-color: rgba(59, 130, 246, 0.6);
        }
        .play-icon {
            color: #3b82f6;
            font-size: 1.4rem;
            transition: all 0.4s ease;
        }
        .episode-card:hover .play-icon {
            transform: scale(1.2);
            color: #60a5fa;
        }
        .episode-info {
            flex: 1;
        }
        .episode-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: white;
            transition: color 0.3s ease;
        }
        .episode-card:hover .episode-title {
            color: #3b82f6;
        }
        .episode-duration {
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.6);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .episode-duration i {
            color: #3b82f6;
            font-size: 0.8rem;
        }
        .episode-number-badge {
            position: absolute;
            top: -0.5rem;
            right: -0.5rem;
            width: 1.5rem;
            height: 1.5rem;
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: 600;
            border: 2px solid rgba(255, 255, 255, 0.2);
        }
        .episode-card:hover .episode-number-badge {
            background: linear-gradient(135deg, #2563eb, #3b82f6);
        }
        .episode-card:hover .episode-duration {
            color: #60a5fa;
        }
        .episode-card:hover .episode-duration i {
            color: #60a5fa;
        }
        .intro-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: black;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .intro-video, .main-video {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain;
            background: #000;
        }
        .skip-intro {
            position: absolute;
            bottom: 2rem;
            right: 2rem;
            background: rgba(59, 130, 246, 0.9);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 3;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 0.5s ease forwards 1s;
        }
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .skip-intro:hover {
            background: rgba(59, 130, 246, 1);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(59, 130, 246, 0.4);
        }
        .controls {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
            padding: 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 5;
        }
        .video-wrapper:hover .controls {
            opacity: 1;
        }
        .button {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            padding: 5px;
            transition: all 0.3s ease;
        }
        .button:hover {
            color: #3b82f6;
            transform: scale(1.1);
        }
        .progress-bar {
            flex: 1;
            height: 5px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 5px;
            cursor: pointer;
            position: relative;
        }
        .progress {
            height: 100%;
            background: #3b82f6;
            border-radius: 5px;
            width: 0;
            transition: width 0.1s linear;
        }
        .progress-bar:hover .progress {
            background: #60a5fa;
        }
        .time {
            color: white;
            font-size: 14px;
            min-width: 100px;
            text-align: center;
        }
        .volume-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .volume-slider {
            width: 80px;
            height: 5px;
            -webkit-appearance: none;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 5px;
            transition: all 0.3s ease;
        }
        .volume-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 12px;
            height: 12px;
            background: #3b82f6;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .volume-slider::-webkit-slider-thumb:hover {
            background: #60a5fa;
            transform: scale(1.2);
        }

        @media (max-width: 768px) {
            .side-nav {
                width: 100%;
                height: 4rem;
                bottom: 0;
                top: auto;
                flex-direction: row;
                justify-content: space-around;
                padding: 0.5rem;
                border-right: none;
                border-top: 1px solid var(--border);
            }

            .logo-section {
                display: none;
            }

            .nav-link {
                padding: 0.5rem;
                margin-bottom: 0;
            }

            .nav-link span {
                display: none;
            }

            .nav-link i {
                font-size: 1.2rem;
            }

            .main-content {
                margin-left: 0;
                padding: 1rem;
                width: 100%;
                margin-bottom: 4rem;
            }

            .detail-container {
                border-radius: 1rem;
            }

            .md\:flex {
                flex-direction: column;
            }

            .md\:w-1\/3 {
                width: 100%;
            }

            .md\:w-2\/3 {
                width: 100%;
            }

            .md\:pl-8 {
                padding-left: 0;
                margin-top: 1.5rem;
            }

            /* Video Player Mobil Ayarları */
            .video-container {
                margin: 1rem -1rem;
                border-radius: 0;
            }

            .controls {
                padding: 1rem;
            }

            .volume-control {
                display: none;
            }

            /* Sezon ve Bölüm Listesi */
            .episode-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
                padding: 1rem;
            }

            .season-header {
                padding: 1.2rem;
            }

            /* Yorum Alanı */
            .comments-section {
                padding: 1rem;
                margin: 1rem -1rem;
                border-radius: 0;
            }

            .comment-actions {
                flex-direction: column;
                gap: 0.8rem;
            }

            .rating-select, 
            .spoiler-checkbox {
                width: 100%;
            }

            .comment-submit {
                width: 100%;
                justify-content: center;
            }

            .comment-card {
                padding: 1rem;
            }

            .comment-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.8rem;
            }

            .user-info {
                width: 100%;
            }
        }

        /* Tablet Stilleri */
        @media (min-width: 769px) and (max-width: 1024px) {
            .main-content {
                margin-left: 0;
                width: 100%;
            }

            .episode-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .side-nav {
                transform: translateX(-100%);
            }

            .side-nav.active {
                transform: translateX(0);
            }
        }

        /* Küçük Ekran Telefon Stilleri */
        @media (max-width: 480px) {
            .video-controls {
                padding: 0.5rem;
            }

            .time {
                display: none;
            }

            .comment-textarea {
                min-height: 80px;
            }

            .rating-badge {
                padding: 0.2rem 0.5rem;
                font-size: 0.8rem;
            }
        }

        /* Yorum Alanı Stilleri */
        .comment-section {
            margin-top: 2rem;
            padding: 2rem;
            background: rgba(30, 41, 59, 0.7);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1.5rem;
        }

        .comment-form textarea {
            background: rgba(15, 23, 42, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: white;
            resize: vertical;
            min-height: 120px;
            line-height: 1.5;
            padding: 1rem;
            width: 100%;
            border-radius: 12px;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            -webkit-user-select: text !important;
            user-select: text !important;
            -webkit-touch-callout: text !important;
            -khtml-user-select: text !important;
            -moz-user-select: text !important;
            -ms-user-select: text !important;
        }

        .comment-form textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
        }

        .comment-form textarea::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .comment-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .spoiler-toggle {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .rating-select {
            background: rgba(15, 23, 42, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: white;
            padding: 0.5rem;
            border-radius: 8px;
        }

        .submit-comment {
            background: linear-gradient(135deg, var(--primary), #1d4ed8);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .submit-comment:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .comment-display {
            white-space: pre-wrap;
            word-break: break-word;
        }

        .comments-section {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .comment-textarea {
            width: 100%;
            min-height: 100px;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 0.5rem;
            color: white;
            resize: vertical;
        }

        .rating-select {
            padding: 0.5rem 1rem;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 0.5rem;
            color: white;
        }

        .spoiler-checkbox {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .comment-submit {
            padding: 0.5rem 1.5rem;
            background: var(--primary);
            border-radius: 0.5rem;
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .comment-submit:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
        }

        .comment-card {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin-bottom: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        .comment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .username {
            font-weight: 600;
            color: white;
        }

        .comment-date {
            font-size: 0.875rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .rating-badge {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.25rem 0.75rem;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 1rem;
            font-weight: 500;
        }

        .role-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .role-badge.founder {
            background: rgba(59, 130, 246, 0.2);
            color: rgb(59, 130, 246);
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .role-badge.admin {
            background: rgba(239, 68, 68, 0.2);
            color: rgb(239, 68, 68);
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .role-badge.contributor {
            background: rgba(16, 185, 129, 0.2);
            color: rgb(16, 185, 129);
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .role-badge.guide {
            background: rgba(245, 158, 11, 0.2);
            color: rgb(245, 158, 11);
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        .role-badge.member {
            background: rgba(156, 163, 175, 0.2);
            color: rgb(156, 163, 175);
            border: 1px solid rgba(156, 163, 175, 0.3);
        }

        .delete-comment {
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: all 0.3s ease;
        }

        .delete-comment:hover {
            background: rgba(239, 68, 68, 0.1);
            transform: scale(1.1);
        }

        .spoiler {
            position: relative;
            cursor: pointer;
        }

        .spoiler .comment-text {
            filter: blur(5px);
            transition: filter 0.3s ease;
        }

        .spoiler.revealed .comment-text {
            filter: none;
        }

        .spoiler-warning {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: rgb(239, 68, 68);
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background: rgba(239, 68, 68, 0.1);
            border-radius: 0.5rem;
        }

        .comment-content {
            margin-top: 1rem;
            line-height: 1.6;
        }

        .login-prompt {
            text-align: center;
            padding: 2rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 0.5rem;
            margin-bottom: 2rem;
        }

        .episodes-container {
            background: rgba(15, 23, 42, 0.6);
            border-radius: 16px;
            border: 1px solid rgba(59, 130, 246, 0.2);
            overflow: hidden;
        }

        .seasons-list {
            display: flex;
            flex-direction: column;
        }

        .season-item {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .season-item:last-child {
            border-bottom: none;
        }

        .season-header {
            padding: 1.25rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(30, 41, 59, 0.4);
        }

        .season-header:hover {
            background: rgba(30, 41, 59, 0.6);
        }

        .season-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1.1rem;
            font-weight: 500;
        }

        .episode-count {
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.6);
            margin-left: 0.5rem;
        }

        .season-arrow {
            transition: transform 0.3s ease;
        }

        .season-item.active .season-arrow {
            transform: rotate(90deg);
        }

        .season-episodes {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-in-out;
            background: rgba(15, 23, 42, 0.3);
        }

        .season-item.active .season-episodes {
            max-height: 2000px;
        }

        .episode-item {
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

        .episode-item:last-child {
            border-bottom: none;
        }

        .episode-link {
            padding: 1rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: all 0.3s ease;
        }

        .episode-link:hover {
            background: rgba(59, 130, 246, 0.1);
        }

        .episode-number {
            font-weight: 500;
        }

        .episode-duration {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
        }

        .play-button {
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(59, 130, 246, 0.2);
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .episode-link:hover .play-button {
            background: rgba(59, 130, 246, 0.4);
            transform: scale(1.1);
        }

        .no-seasons {
            padding: 3rem;
            text-align: center;
        }

        @media (max-width: 768px) {
            .season-header {
                padding: 1rem;
            }

            .episode-link {
                padding: 1rem;
            }

            .season-info {
                font-size: 1rem;
            }

            .episode-count {
                display: none;
            }
        }

        .next-episode {
            position: absolute;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
            background: rgba(59, 130, 246, 0.9);
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            display: none;
            align-items: center;
            gap: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            z-index: 50;
            animation: fadeIn 0.5s ease;
        }

        .next-episode:hover {
            background: rgba(37, 99, 235, 0.9);
            transform: translateY(-50%) scale(1.05);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-50%) translateX(20px); }
            to { opacity: 1; transform: translateY(-50%) translateX(0); }
        }

        /* Mobil Öğretici Stilleri */
        .mobile-tutorial {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            padding: 2rem;
            border-radius: 1rem;
            text-align: center;
            z-index: 100;
            display: none;
            width: 90%;
            max-width: 320px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .tutorial-step {
            margin-bottom: 1.5rem;
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 0.5s forwards;
        }

        .tutorial-step i {
            font-size: 2rem;
            color: #3b82f6;
            margin-bottom: 0.5rem;
        }

        .tutorial-step p {
            color: white;
            font-size: 0.9rem;
        }

        .tutorial-close {
            background: #3b82f6;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 0.5rem;
            border: none;
            margin-top: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .tutorial-close:hover {
            background: #2563eb;
        }

        @keyframes fadeInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Mobil Kontroller İyileştirmeleri */
        @media (max-width: 768px) {
            .controls {
                padding: 1rem;
                background: linear-gradient(transparent, rgba(0, 0, 0, 0.9));
            }

            .button {
                padding: 0.8rem;
            }

            .time {
                font-size: 0.8rem;
            }

            .volume-control {
                display: none;
            }

            .progress-bar {
                height: 4px;
            }

            .progress-hover {
                height: 16px;
                background: rgba(255, 255, 255, 0.2);
                position: absolute;
                top: -6px;
                width: 100%;
                transform: scaleX(0);
                transform-origin: left;
                transition: transform 0.3s ease;
            }

            .progress-time {
                position: absolute;
                top: -25px;
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 2px 6px;
                border-radius: 4px;
                font-size: 12px;
                display: none;
            }

            .video-overlay .big-play-button {
                width: 60px;
                height: 60px;
            }

            .video-overlay .big-play-button i {
                font-size: 1.5rem;
            }

            .next-episode {
                padding: 8px 16px;
                font-size: 0.9rem;
            }
        }

        /* Dokunmatik Kontroller için Görsel Geri Bildirim */
        .touch-feedback {
            position: absolute;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            pointer-events: none;
            transform: translate(-50%, -50%) scale(0);
            animation: touchRipple 0.5s ease-out;
        }

        @keyframes touchRipple {
            to {
                transform: translate(-50%, -50%) scale(2);
                opacity: 0;
            }
        }
    </style>
    <script>
        // Sağ tık engelleme
        document.addEventListener('contextmenu', function(e) {
            if (!e.target.closest('textarea')) {
                e.preventDefault();
            }
        });

        // Klavye kısayollarını engelleme
        document.addEventListener('keydown', function(e) {
            // Textarea içindeyken klavye olaylarını engelleme
            if (e.target.tagName === 'TEXTAREA') {
                return;
            }

            // F12, Ctrl+Shift+I, Ctrl+Shift+J, Ctrl+Shift+C
            if (
                e.keyCode === 123 || 
                (e.ctrlKey && e.shiftKey && (e.keyCode === 73 || e.keyCode === 74 || e.keyCode === 67))
            ) {
                e.preventDefault();
            }
            // Ctrl+U
            if (e.ctrlKey && e.keyCode === 85) {
                e.preventDefault();
            }
            // Ctrl+S
            if (e.ctrlKey && e.keyCode === 83) {
                e.preventDefault();
            }
        });

        // DevTools açılmasını engelleme
        (function() {
            function detectDevTools(allow) {
                if(allow) return;
                
                const element = document.createElement('any');
                element.__defineGetter__("id", function() {
                    detectDevTools(true);
                });
                
                setInterval(function() {
                    console.log(element);
                    console.clear();
                }, 1000);
            }
            detectDevTools(false);
        })();

        // Console mesajları
        console.log = function() {};
        console.warn = function() {};
        console.error = function() {};
        console.debug = function() {};
        console.info = function() {};
    </script>
</head>
<body class="text-gray-100 min-h-screen">
    <%- include('partials/navbar') %>

    <!-- Ana İçerik -->
    <main class="main-content">
        <div class="detail-container">
            <div class="relative">
                <!-- Arkaplan Banner -->
                <div class="absolute inset-0 bg-cover bg-center blur-sm opacity-30" style="background-image: url('<%= anime.imageUrl %>');"></div>
                
                <div class="relative md:flex p-6">
                    <!-- Anime Posteri -->
                    <div class="md:w-1/3 flex justify-center md:justify-start">
                        <img src="<%= anime.imageUrl %>" alt="<%= anime.name %>" class="w-64 h-96 object-cover rounded-lg shadow-2xl">
                    </div>
                    
                    <!-- Anime Bilgileri -->
                    <div class="md:w-2/3 md:pl-8 mt-6 md:mt-0">
                        <h1 class="text-4xl font-bold mb-4"><%= anime.name %></h1>
                        <div class="flex items-center gap-4 mb-6">
                            <div class="flex items-center gap-2">
                                <i class="fas fa-eye text-blue-500"></i>
                                <span><%= anime.viewCount %> görüntülenme</span>
                            </div>
                            
                            <% if (user) { %>
                                <button id="favoriteButton" class="flex items-center gap-2 px-4 py-2 rounded-lg bg-red-500 hover:bg-red-600 transition-colors">
                                    <i class="fas fa-heart"></i>
                                    <span>Favorilere Ekle</span>
                                </button>
                            <% } %>
                        </div>
                        
                        <p class="text-gray-300 mb-8"><%= anime.description %></p>

                        <!-- Video Player Container -->
                        <div class="video-container relative w-full" style="padding-top: 56.25%;">
                            <div id="videoWrapper" class="absolute inset-0 bg-black">
                                <video class="main-video" id="videoPlayer" style="width: 100%; height: 100%; position: absolute; top: 0; left: 0; object-fit: contain;" preload="metadata" playsinline webkit-playsinline>
                                    Your browser doesn't support video playback.
                                </video>
                                
                                <!-- Video Overlay -->
                                <div id="videoOverlay" class="absolute inset-0 bg-black/50 flex items-center justify-center cursor-pointer">
                                    <div class="text-6xl text-white">
                                        <i class="fas fa-play"></i>
                                    </div>
                                </div>

                                <!-- Video Controls -->
                                <div class="video-controls absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 to-transparent p-4 opacity-0 transition-opacity duration-300">
                                    <div class="flex items-center gap-4">
                                        <button class="text-white hover:text-blue-500 transition-colors" id="playPauseBtn">
                                            <i class="fas fa-play"></i>
                                        </button>

                                        <div class="flex-1 relative">
                                            <div class="progress-bar h-1 bg-white/30 rounded-full">
                                                <div class="progress h-full bg-blue-500 rounded-full" style="width: 0%"></div>
                                            </div>
                                            <div class="absolute -top-6 left-0 bg-black/80 text-white text-xs px-2 py-1 rounded hidden" id="timeTooltip"></div>
                                        </div>

                                        <div class="text-white text-sm" id="timeDisplay">00:00 / 00:00</div>

                                        <div class="flex items-center gap-2">
                                            <button class="text-white hover:text-blue-500 transition-colors" id="volumeBtn">
                                                <i class="fas fa-volume-up"></i>
                                            </button>
                                            <input type="range" class="w-20" id="volumeSlider" min="0" max="100" value="100">
                                        </div>

                                        <button class="text-white hover:text-blue-500 transition-colors" id="pipBtn">
                                            <i class="fas fa-external-link-alt"></i>
                                        </button>

                                        <button class="text-white hover:text-blue-500 transition-colors" id="fullscreenBtn">
                                            <i class="fas fa-expand"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Bölümler -->
                        <div class="mt-8">
                            <h2 class="text-2xl font-bold mb-6 flex items-center gap-3">
                                <i class="fas fa-play text-blue-500"></i>
                                <span>Bölümler</span>
                            </h2>

                            <!-- Sezonlar ve Bölümler -->
                            <div class="episodes-container space-y-4">
                                <% if (anime.seasons && anime.seasons.length > 0) { %>
                                    <div class="seasons-list">
                                        <% anime.seasons.forEach(function(season) { %>
                                            <div class="season-item bg-gray-800/50 rounded-xl overflow-hidden mb-4">
                                                <div class="season-header cursor-pointer p-4 flex items-center justify-between" onclick="toggleSeason(this)">
                                                    <div class="season-info">
                                                        <h3 class="text-lg font-semibold">Sezon <%= season.seasonNumber %></h3>
                                                        <span class="text-sm text-gray-400 episode-count"><%= season.episodes.length %> Bölüm</span>
                                                    </div>
                                                    <i class="fas fa-chevron-down transform transition-transform duration-300"></i>
                                                </div>
                                                
                                                <div class="season-episodes" style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease;">
                                                    <div class="p-4 space-y-2">
                                                        <% if (season.episodes && season.episodes.length > 0) { %>
                                                            <% season.episodes.sort((a, b) => a.episodeNumber - b.episodeNumber).forEach(function(episode) { %>
                                                                <div class="episode-item flex items-center justify-between p-2 hover:bg-gray-700/30 rounded-lg transition-colors cursor-pointer"
                                                                    onclick="playEpisode('<%= episode.videoUrl %>', '<%= anime._id %>', '<%= season.seasonNumber %>', '<%= episode.episodeNumber %>')"
                                                                    data-video-url="<%= episode.videoUrl %>"
                                                                    data-anime-id="<%= anime._id %>"
                                                                    data-season="<%= season.seasonNumber %>"
                                                                    data-episode="<%= episode.episodeNumber %>">
                                                                    <div class="flex items-center gap-3">
                                                                        <div class="play-button">
                                                                            <i class="fas fa-play text-blue-500"></i>
                                                                        </div>
                                                                        <div>
                                                                            <div class="text-sm font-medium">Bölüm <%= episode.episodeNumber %></div>
                                                                            <div class="text-xs text-gray-400">
                                                                                <%= episode.title || `Bölüm ${episode.episodeNumber}` %>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="text-sm text-gray-400">
                                                                        <%= episode.duration %>
                                                                    </div>
                                                                </div>
                                                            <% }); %>
                                                        <% } else { %>
                                                            <div class="text-center py-4">
                                                                <p class="text-gray-400">Bu sezonda henüz bölüm bulunmuyor.</p>
                                                            </div>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } else { %>
                                    <div class="text-center py-8">
                                        <p class="text-gray-400">Henüz bölüm eklenmemiş.</p>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Yorumlar Bölümü -->
        <div class="comments-section mt-8 bg-[rgba(30,41,59,0.7)] backdrop-blur-md rounded-xl p-6">
            <h2 class="text-2xl font-bold mb-6 flex items-center gap-3">
                <i class="fas fa-comments text-blue-500"></i>
                Yorumlar
            </h2>
            
            <% if (user) { %>
                <!-- Yorum Formu -->
                <div class="bg-[#13141f] rounded-lg p-6 mb-6">
                    <h3 class="text-xl font-bold mb-4">Yorum Yap</h3>
                    <form action="/api/comments/add" method="POST" class="space-y-4">
                        <input type="hidden" name="animeId" value="<%= anime._id %>">
                        
                        <div>
                            <label class="block text-gray-400 mb-2">Puanınız</label>
                            <div class="flex gap-4">
                                <% for(let i = 1; i <= 5; i++) { %>
                                    <label class="flex items-center gap-2 cursor-pointer">
                                        <input type="radio" name="rating" value="<%= i %>" class="hidden peer" required>
                                        <div class="w-8 h-8 flex items-center justify-center rounded bg-gray-800 text-gray-400 peer-checked:bg-yellow-500 peer-checked:text-white transition-colors">
                                            <%= i %>
                                        </div>
                                    </label>
                                <% } %>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-gray-400 mb-2">Yorumunuz</label>
                            <textarea name="content" rows="4" 
                                class="w-full bg-gray-800 rounded p-3 text-white focus:ring-2 focus:ring-blue-500 outline-none"
                                placeholder="Bu anime hakkında ne düşünüyorsunuz?" 
                                required></textarea>
                        </div>
                        
                        <div class="flex justify-end">
                            <button type="submit" 
                                class="px-6 py-2 bg-blue-500 hover:bg-blue-600 rounded text-white transition-colors">
                                Yorum Yap
                            </button>
                        </div>
                    </form>
                </div>
            <% } else { %>
                <div class="bg-[#13141f] rounded-lg p-6 mb-6 text-center">
                    <p class="text-gray-400">Yorum yapmak için <a href="/auth/login" class="text-blue-400 hover:underline">giriş yapın</a></p>
                </div>
            <% } %>

            <!-- Yorumlar Listesi -->
            <div class="space-y-6">
                <% if (comments && comments.length > 0) { %>
                    <% comments.forEach(comment => { %>
                        <div class="bg-[#13141f] rounded-lg p-6">
                            <div class="flex items-start justify-between mb-4">
                                <div class="flex items-center gap-3">
                                    <img src="<%= comment.user.discordAvatar || comment.user.avatar || '/images/default-avatar.png' %>" 
                                        alt="<%= comment.user.username %>" 
                                        class="w-10 h-10 rounded-full">
                                    <div>
                                        <h4 class="font-bold"><%= comment.user.username %></h4>
                                        <div class="flex items-center gap-2 text-sm text-gray-400">
                                            <span><%= comment.rating %>/5</span>
                                            <span>•</span>
                                            <span><%= new Date(comment.createdAt).toLocaleDateString('tr-TR') %></span>
                                        </div>
                                    </div>
                                </div>
                                
                                <% if (user && comment.canDelete(user)) { %>
                                    <form action="/api/comments/delete/<%= comment._id %>" method="POST" class="ml-4">
                                        <button type="submit" class="text-red-400 hover:text-red-500">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                            </svg>
                                        </button>
                                    </form>
                                <% } %>
                            </div>
                            
                            <p class="text-gray-300"><%= comment.content %></p>
                            
                            <% if (user) { %>
                                <div class="mt-4 flex items-center gap-2">
                                    <button onclick="likeComment('<%= comment._id %>')" 
                                        class="flex items-center gap-1 text-sm text-gray-400 hover:text-blue-400"
                                        id="like-btn-<%= comment._id %>">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
                                        </svg>
                                        <span id="like-count-<%= comment._id %>"><%= comment.likes.length %></span>
                                    </button>
                                </div>
                            <% } %>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="bg-[#13141f] rounded-lg p-6 text-center text-gray-400">
                        Henüz yorum yapılmamış. İlk yorumu siz yapın!
                    </div>
                <% } %>
            </div>
        </div>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.1/flowbite.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const videoPlayer = document.getElementById('videoPlayer');
        const videoWrapper = document.getElementById('videoWrapper');
        const videoOverlay = document.getElementById('videoOverlay');
        const videoControls = document.querySelector('.video-controls');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        const pipBtn = document.getElementById('pipBtn');
        const currentTimeDisplay = document.getElementById('currentTime');
        const durationDisplay = document.getElementById('duration');
        const progressBar = document.getElementById('progressBar');
        const volumeBtn = document.getElementById('volumeBtn');
        const volumeSlider = document.getElementById('volumeSlider');

        // Video yüklendiğinde
        videoPlayer.addEventListener('loadedmetadata', () => {
            durationDisplay.textContent = formatTime(videoPlayer.duration);
            videoPlayer.volume = volumeSlider.value;
        });

        // Oynat/Duraklat
        playPauseBtn.addEventListener('click', togglePlayPause);
        videoPlayer.addEventListener('click', togglePlayPause);

        function togglePlayPause() {
            if (videoPlayer.paused) {
                videoPlayer.play();
                videoOverlay.style.display = 'none';
            } else {
                videoPlayer.pause();
                videoOverlay.style.display = 'flex';
            }
            updatePlayPauseIcon();
        }

        function updatePlayPauseIcon() {
            const icon = playPauseBtn.querySelector('i');
            if (videoPlayer.paused) {
                icon.classList.remove('fa-pause');
                icon.classList.add('fa-play');
            } else {
                icon.classList.remove('fa-play');
                icon.classList.add('fa-pause');
            }
        }

        // İlerleme çubuğu
        videoPlayer.addEventListener('timeupdate', () => {
            const progress = (videoPlayer.currentTime / videoPlayer.duration) * 100;
            progressBar.value = progress;
            currentTimeDisplay.textContent = formatTime(videoPlayer.currentTime);
        });

        progressBar.addEventListener('input', () => {
            const time = (progressBar.value / 100) * videoPlayer.duration;
            videoPlayer.currentTime = time;
        });

        // Ses kontrolü
        volumeSlider.addEventListener('input', () => {
            videoPlayer.volume = volumeSlider.value;
            updateVolumeIcon();
        });

        volumeBtn.addEventListener('click', () => {
            videoPlayer.muted = !videoPlayer.muted;
            updateVolumeIcon();
        });

        function updateVolumeIcon() {
            const icon = volumeBtn.querySelector('i');
            icon.classList.remove('fa-volume-up', 'fa-volume-down', 'fa-volume-off', 'fa-volume-mute');
            
            if (videoPlayer.muted || videoPlayer.volume === 0) {
                icon.classList.add('fa-volume-mute');
            } else if (videoPlayer.volume < 0.33) {
                icon.classList.add('fa-volume-off');
            } else if (videoPlayer.volume < 0.67) {
                icon.classList.add('fa-volume-down');
            } else {
                icon.classList.add('fa-volume-up');
            }
        }

        // PiP modu
        pipBtn.addEventListener('click', async () => {
            try {
                if (document.pictureInPictureElement) {
                    await document.exitPictureInPicture();
                } else {
                    await videoPlayer.requestPictureInPicture();
                }
            } catch (error) {
                console.error('PiP hatası:', error);
            }
        });

        // Tam ekran
        fullscreenBtn.addEventListener('click', toggleFullscreen);

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                if (videoPlayer.requestFullscreen) {
                    videoPlayer.requestFullscreen();
                } else if (videoPlayer.webkitRequestFullscreen) {
                    videoPlayer.webkitRequestFullscreen();
                }
            } else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                }
            }
        }

        // Zaman formatı
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            seconds = Math.floor(seconds % 60);
            return `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        // Ekran yönü değiştiğinde
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                if (window.orientation === 90 || window.orientation === -90) {
                    toggleFullscreen();
                }
            }, 100);
        });
    });
    </script>

    <script>
    // Favori butonu işlemleri
    const favoriteButton = document.getElementById('favoriteButton');
    if (favoriteButton) {
        favoriteButton.addEventListener('click', async () => {
            try {
                const response = await fetch(`/profile/favorites/<%= anime._id %>`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    const icon = favoriteButton.querySelector('i');
                    const text = favoriteButton.querySelector('span');
                    
                    if (data.isFavorite) {
                        icon.style.color = '#fff';
                        text.textContent = 'Favorilerden Çıkar';
                        favoriteButton.classList.remove('bg-red-500', 'hover:bg-red-600');
                        favoriteButton.classList.add('bg-gray-500', 'hover:bg-gray-600');
                    } else {
                        icon.style.color = '#fff';
                        text.textContent = 'Favorilere Ekle';
                        favoriteButton.classList.remove('bg-gray-500', 'hover:bg-gray-600');
                        favoriteButton.classList.add('bg-red-500', 'hover:bg-red-600');
                    }
                }
            } catch (error) {
                console.error('Favori işlemi hatası:', error);
            }
        });
    }
    </script>

    <script>
    async function likeComment(commentId) {
        try {
            const response = await fetch(`/api/comments/${commentId}/like`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                const likeCount = document.getElementById(`like-count-${commentId}`);
                likeCount.textContent = data.likeCount;
                
                const likeBtn = document.getElementById(`like-btn-${commentId}`);
                if (data.liked) {
                    likeBtn.classList.add('text-blue-400');
                    likeBtn.classList.remove('text-gray-400');
                } else {
                    likeBtn.classList.add('text-gray-400');
                    likeBtn.classList.remove('text-blue-400');
                }
            }
        } catch (error) {
            console.error('Beğeni işlemi sırasında hata:', error);
        }
    }
    </script>

    <!-- Mobil Menü Script -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const menuButton = document.getElementById('menuButton');
        const sideNav = document.querySelector('.side-nav');
        const menuOverlay = document.getElementById('menuOverlay');

        function toggleMenu() {
            sideNav.classList.toggle('active');
            menuOverlay.classList.toggle('hidden');
            document.body.classList.toggle('overflow-hidden');
        }

        menuButton.addEventListener('click', toggleMenu);
        menuOverlay.addEventListener('click', toggleMenu);

        // ESC tuşu ile menüyü kapatma
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && sideNav.classList.contains('active')) {
                toggleMenu();
            }
        });

        // Ekran döndürme olayını dinle
        window.addEventListener('orientationchange', () => {
            if (sideNav.classList.contains('active')) {
                toggleMenu();
            }
        });
    });
    </script>

    <script>
    // Spoiler yorumları için tıklama olayı
    document.querySelectorAll('.spoiler').forEach(spoiler => {
        spoiler.addEventListener('click', function() {
            this.classList.toggle('revealed');
        });
    });
    </script>

    <script>
    function toggleSeason(header) {
        const seasonItem = header.closest('.season-item');
        const episodesContainer = seasonItem.querySelector('.season-episodes');
        const arrow = header.querySelector('.fa-chevron-down');
        
        // Maksimum yüksekliği hesapla
        const content = episodesContainer.querySelector('.p-4');
        const maxHeight = content.scrollHeight;
        
        // Sezonun açık/kapalı durumunu kontrol et
        const isOpen = episodesContainer.style.maxHeight !== '0px' && episodesContainer.style.maxHeight !== '';
        
        // Tüm sezonları kapat
        document.querySelectorAll('.season-episodes').forEach(container => {
            container.style.maxHeight = '0px';
            container.closest('.season-item').querySelector('.fa-chevron-down').style.transform = 'rotate(0deg)';
        });
        
        // Tıklanan sezonu aç/kapat
        if (!isOpen) {
            episodesContainer.style.maxHeight = maxHeight + 'px';
            arrow.style.transform = 'rotate(180deg)';
        }
    }

    // Sayfa yüklendiğinde ilk sezonu aç
    document.addEventListener('DOMContentLoaded', function() {
        const firstSeasonHeader = document.querySelector('.season-header');
        if (firstSeasonHeader) {
            toggleSeason(firstSeasonHeader);
        }
    });
    </script>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const videoPlayer = document.getElementById('videoPlayer');
        const videoOverlay = document.getElementById('videoOverlay');
        const mobileTutorial = document.getElementById('mobileTutorial');
        const tutorialClose = document.querySelector('.tutorial-close');
        
        let touchStartX = 0;
        let touchStartY = 0;
        let touchStartTime = 0;
        let isSeeking = false;
        let isVolumeAdjusting = false;
        let lastTapTime = 0;

        // Mobil öğreticiyi göster (ilk kez için)
        if (!localStorage.getItem('videoTutorialSeen')) {
            mobileTutorial.style.display = 'block';
        }

        // Öğreticiyi kapat
        tutorialClose.addEventListener('click', () => {
            mobileTutorial.style.display = 'none';
            localStorage.setItem('videoTutorialSeen', 'true');
        });

        // Dokunma başlangıcı
        videoPlayer.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
            touchStartTime = Date.now();
            
            // Çift dokunma kontrolü
            const currentTime = Date.now();
            if (currentTime - lastTapTime < 300) {
                toggleFullscreen();
            }
            lastTapTime = currentTime;
        });

        // Dokunma hareketi
        videoPlayer.addEventListener('touchmove', (e) => {
            if (e.touches.length !== 1) return;

            const touchX = e.touches[0].clientX;
            const touchY = e.touches[0].clientY;
            const deltaX = touchX - touchStartX;
            const deltaY = touchY - touchStartY;
            const moveTime = Date.now() - touchStartTime;

            // Yatay hareket - video ilerleme
            if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 20) {
                isSeeking = true;
                const seekTime = (deltaX / window.innerWidth) * videoPlayer.duration;
                videoPlayer.currentTime = Math.max(0, Math.min(videoPlayer.duration, videoPlayer.currentTime + seekTime));
                showTouchFeedback(touchX, touchY, `${Math.abs(deltaX) > 0 ? (deltaX > 0 ? '+' : '-') : ''}${Math.abs(Math.round(seekTime))}s`);
            }
            // Dikey hareket - ses kontrolü
            else if (Math.abs(deltaY) > Math.abs(deltaX) && Math.abs(deltaY) > 20) {
                isVolumeAdjusting = true;
                const volumeChange = -deltaY / 100;
                videoPlayer.volume = Math.max(0, Math.min(1, videoPlayer.volume + volumeChange));
                showTouchFeedback(touchX, touchY, `${Math.round(videoPlayer.volume * 100)}%`);
            }
        });

        // Dokunma sonu
        videoPlayer.addEventListener('touchend', () => {
            if (!isSeeking && !isVolumeAdjusting && Date.now() - touchStartTime < 300) {
                togglePlayPause();
            }
            isSeeking = false;
            isVolumeAdjusting = false;
        });

        // Görsel geri bildirim
        function showTouchFeedback(x, y, text) {
            const feedback = document.createElement('div');
            feedback.className = 'touch-feedback';
            feedback.style.left = x + 'px';
            feedback.style.top = y + 'px';
            
            const textElement = document.createElement('span');
            textElement.textContent = text;
            textElement.style.position = 'absolute';
            textElement.style.left = '50%';
            textElement.style.top = '50%';
            textElement.style.transform = 'translate(-50%, -50%)';
            textElement.style.color = 'white';
            textElement.style.fontSize = '14px';
            
            feedback.appendChild(textElement);
            document.body.appendChild(feedback);
            
            setTimeout(() => feedback.remove(), 500);
        }

        // Oynat/Duraklat
        function togglePlayPause() {
            if (videoPlayer.paused) {
                videoPlayer.play();
                videoOverlay.style.display = 'none';
            } else {
                videoPlayer.pause();
                videoOverlay.style.display = 'flex';
            }
            updatePlayPauseIcon();
        }

        // Tam ekran
        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                if (videoPlayer.requestFullscreen) {
                    videoPlayer.requestFullscreen();
                } else if (videoPlayer.webkitRequestFullscreen) {
                    videoPlayer.webkitRequestFullscreen();
                }
            } else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                }
            }
        }
    });
    </script>

    <!-- Hoş Geldin Modalı -->
    <div id="pageTutorial" class="fixed inset-0 z-50 flex items-center justify-center bg-black/60" style="display: none;">
        <div class="bg-gray-800/95 p-6 rounded-2xl max-w-sm w-11/12 shadow-xl border border-gray-700/50">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-white">Hoş Geldiniz!</h3>
                <button id="pageTutorialClose" class="text-gray-400 hover:text-white transition-colors">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="space-y-4">
                <div class="flex items-center gap-3 bg-gray-700/30 p-3 rounded-lg">
                    <div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center flex-shrink-0">
                        <i class="fas fa-list text-lg text-white"></i>
                    </div>
                    <p class="text-gray-300 text-sm">Sezonlar ve bölümler arasında kolayca gezinin</p>
                </div>
                
                <div class="flex items-center gap-3 bg-gray-700/30 p-3 rounded-lg">
                    <div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center flex-shrink-0">
                        <i class="fas fa-heart text-lg text-white"></i>
                    </div>
                    <p class="text-gray-300 text-sm">Favori animelerinizi koleksiyonunuza ekleyin</p>
                </div>
                
                <div class="flex items-center gap-3 bg-gray-700/30 p-3 rounded-lg">
                    <div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center flex-shrink-0">
                        <i class="fas fa-comments text-lg text-white"></i>
                    </div>
                    <p class="text-gray-300 text-sm">Diğer izleyicilerle yorumlarınızı paylaşın</p>
                </div>
                
                <div class="flex items-center gap-3 bg-gray-700/30 p-3 rounded-lg">
                    <div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center flex-shrink-0">
                        <i class="fas fa-mobile-alt text-lg text-white"></i>
                    </div>
                    <p class="text-gray-300 text-sm">Mobil cihazınızda kesintisiz anime keyfi yaşayın</p>
                </div>
            </div>
            
            <button class="w-full mt-6 bg-blue-500 hover:bg-blue-600 text-white py-2.5 px-4 rounded-lg transition-colors text-sm font-medium flex items-center justify-center gap-2">
                <i class="fas fa-check"></i>
                Anladım
            </button>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const pageTutorial = document.getElementById('pageTutorial');
        const pageTutorialClose = document.querySelector('#pageTutorialClose');
        const tutorialButton = document.querySelector('#pageTutorial button:last-child');
        
        // Mobil öğreticiyi göster (ilk kez için)
        if (!localStorage.getItem('pageTutorialSeen')) {
            pageTutorial.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
        
        // Öğreticiyi kapat (çarpı butonuyla)
        pageTutorialClose.addEventListener('click', closeTutorial);
        
        // Öğreticiyi kapat (anladım butonuyla)
        tutorialButton.addEventListener('click', closeTutorial);
        
        // Öğreticiyi kapat (dışarı tıklamayla)
        pageTutorial.addEventListener('click', function(e) {
            if (e.target === pageTutorial) {
                closeTutorial();
            }
        });
        
        function closeTutorial() {
            pageTutorial.style.opacity = '0';
            pageTutorial.style.transition = 'opacity 0.2s ease';
            setTimeout(() => {
                pageTutorial.style.display = 'none';
                document.body.style.overflow = '';
                localStorage.setItem('pageTutorialSeen', 'true');
            }, 200);
        }
    });
    </script>

    <script>
    // Video yönetimi için global değişkenler
    let currentVideoToken = null;
    let videoPlayer = document.getElementById('videoPlayer');

    // Video URL'lerini güvenli şekilde yönet
    async function initializeVideo(videoUrl, animeId, season, episode) {
        try {
            const response = await fetch('/video/token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    videoUrl,
                    animeId,
                    season,
                    episode
                })
            });

            const data = await response.json();
            if (data.token) {
                currentVideoToken = data.token;
                loadVideoWithToken(data.token);
            }
        } catch (error) {
            console.error('Video başlatma hatası:', error);
        }
    }

    function loadVideoWithToken(token) {
        if (videoPlayer) {
            // Mevcut video kaynağını temizle
            videoPlayer.pause();
            videoPlayer.removeAttribute('src');
            videoPlayer.load();

            // Yeni video kaynağını ayarla
            videoPlayer.src = `/video/stream/${token}`;
            videoPlayer.play().catch(error => {
                console.error('Video oynatma hatası:', error);
            });
        }
    }

    // Bölüm seçildiğinde
    function playEpisode(videoUrl, animeId, season, episode) {
        initializeVideo(videoUrl, animeId, season, episode);
        
        // Aktif bölümü güncelle
        document.querySelectorAll('.episode-item').forEach(item => {
            item.classList.remove('active');
        });
        event.currentTarget.classList.add('active');

        // Sezon ve bölüm numarasını güncelle
        document.querySelector('.season-number').textContent = season;
        document.querySelector('.episode-number').textContent = episode;
    }

    // Hata yönetimi
    videoPlayer.addEventListener('error', async function(e) {
        if (currentVideoToken) {
            console.error('Video oynatma hatası, yeniden deneniyor...');
            await initializeVideo(currentVideoUrl, currentAnimeId, currentSeason, currentEpisode);
        }
    });
    </script>
</body>
</html> 